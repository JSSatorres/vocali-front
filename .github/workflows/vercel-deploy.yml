name: Deploy to Vercel

on:
  push:
    branches:
      - development

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Clean npm cache and remove lock file
        run: |
          npm cache clean --force
          rm -f package-lock.json
          rm -rf node_modules

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          npm install --legacy-peer-deps

      - name: Install Rollup native dependencies
        run: |
          npm install @rollup/rollup-linux-x64-gnu --save-dev --legacy-peer-deps || true

      - name: Verify installation
        run: |
          npm list rollup || true
          npm list @rollup/rollup-linux-x64-gnu || true

      - name: Prepare Nuxt for testing
        run: |
          # Try to generate Nuxt types and setup
          npx nuxt prepare || {
            echo "nuxt prepare failed, creating minimal .nuxt structure..."
            mkdir -p .nuxt
            cat > .nuxt/tsconfig.json << 'EOF'
          {
            "compilerOptions": {
              "target": "ES2020",
              "module": "ESNext",
              "moduleResolution": "Node",
              "lib": ["ES2020", "DOM", "DOM.Iterable"],
              "allowJs": true,
              "skipLibCheck": true,
              "esModuleInterop": true,
              "allowSyntheticDefaultImports": true,
              "strict": true,
              "forceConsistentCasingInFileNames": true,
              "noEmit": true,
              "resolveJsonModule": true,
              "isolatedModules": true,
              "incremental": true,
              "types": ["vitest/globals", "node"]
            }
          }
          EOF
            echo "Created minimal tsconfig.json"
          }
          # Verify the tsconfig was created
          if [ -f ".nuxt/tsconfig.json" ]; then
            echo "✓ .nuxt/tsconfig.json exists"
          else
            echo "✗ .nuxt/tsconfig.json missing"
            exit 1
          fi

      - name: Run tests
        run: |
          # Run tests with explicit environment setup
          NODE_ENV=test npm run test:ci

      - name: Build Nuxt app
        run: npm run build
        env:
          NUXT_PUBLIC_ENV: ${{ github.ref_name }}

      - name: Deploy to Vercel
        run: |
          npx vercel --token $VERCEL_TOKEN --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
